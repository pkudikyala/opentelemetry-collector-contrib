2025-07-10T14:08:49.484+0530	info	service@v0.129.1-0.20250707130321-ac9adbf016bf/service.go:197	Setting up own telemetry...	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}}
2025-07-10T14:08:49.485+0530	info	builders/builders.go:26	Development component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "traces"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Alpha component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "file", "otelcol.component.kind": "exporter", "otelcol.signal": "traces"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "traces"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Beta component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "batch", "otelcol.component.kind": "processor", "otelcol.pipeline.id": "traces", "otelcol.signal": "traces"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	info	builders/builders.go:26	Development component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Alpha component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "file", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Beta component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Beta component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "batch", "otelcol.component.kind": "processor", "otelcol.pipeline.id": "metrics", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Beta component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	info	builders/builders.go:26	Development component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Alpha component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "file", "otelcol.component.kind": "exporter", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Beta component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "batch", "otelcol.component.kind": "processor", "otelcol.pipeline.id": "logs", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	Logger core does not support injecting component attributes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	otlpreceiver@v0.129.1-0.20250707130321-ac9adbf016bf/otlp.go:58	created signal-agnostic logger	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "traces"}
2025-07-10T14:08:49.485+0530	debug	builders/builders.go:24	Stable component.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	info	builders/builders.go:26	Development component. May change in the future.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "logs"}
2025-07-10T14:08:49.485+0530	info	service@v0.129.1-0.20250707130321-ac9adbf016bf/service.go:257	Starting otelcontribcol...	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "Version": "0.129.0-dev", "NumCPU": 12}
2025-07-10T14:08:49.485+0530	info	extensions/extensions.go:41	Starting extensions...	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:176	[core] original dial target is: "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:459	[core] [Channel #1]Channel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:207	[core] [Channel #1]parsed dial target is: resolver.Target{URL:url.URL{Scheme:"passthrough", Opaque:"", User:(*url.Userinfo)(nil), Host:"", Path:"/otlp.nr-data.net:4317", RawPath:"", OmitHost:false, ForceQuery:false, RawQuery:"", Fragment:"", RawFragment:""}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:208	[core] [Channel #1]Channel authority set to "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/resolver_wrapper.go:210	[core] [Channel #1]Resolver state updated: {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
} (resolver returned new addresses)	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/balancer_wrapper.go:122	[core] [Channel #1]Channel switches to new LB policy "pick_first"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	gracefulswitch/gracefulswitch.go:194	[pick-first-leaf-lb] [pick-first-leaf-lb 0x14001614090] Received new config {
  "shuffleAddressList": false
}, resolver state {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #1]Channel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/balancer_wrapper.go:195	[core] [Channel #1 SubChannel #2]Subchannel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:364	[core] [Channel #1]Channel exiting idle mode	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #1 SubChannel #2]Subchannel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.488+0530	info	grpc@v1.73.0/clientconn.go:1352	[core] [Channel #1 SubChannel #2]Subchannel picks a new address "otlp.nr-data.net:4317" to connect	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:176	[core] original dial target is: "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:459	[core] [Channel #3]Channel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:207	[core] [Channel #3]parsed dial target is: resolver.Target{URL:url.URL{Scheme:"passthrough", Opaque:"", User:(*url.Userinfo)(nil), Host:"", Path:"/otlp.nr-data.net:4317", RawPath:"", OmitHost:false, ForceQuery:false, RawQuery:"", Fragment:"", RawFragment:""}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:208	[core] [Channel #3]Channel authority set to "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/resolver_wrapper.go:210	[core] [Channel #3]Resolver state updated: {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
} (resolver returned new addresses)	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/balancer_wrapper.go:122	[core] [Channel #3]Channel switches to new LB policy "pick_first"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	gracefulswitch/gracefulswitch.go:194	[pick-first-leaf-lb] [pick-first-leaf-lb 0x140011a4a20] Received new config {
  "shuffleAddressList": false
}, resolver state {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #3]Channel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/balancer_wrapper.go:195	[core] [Channel #3 SubChannel #4]Subchannel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:364	[core] [Channel #3]Channel exiting idle mode	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #3 SubChannel #4]Subchannel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:1352	[core] [Channel #3 SubChannel #4]Subchannel picks a new address "otlp.nr-data.net:4317" to connect	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/server.go:690	[core] [Server #5]Server created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	otlpreceiver@v0.129.1-0.20250707130321-ac9adbf016bf/otlp.go:117	Starting GRPC server	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "endpoint": "0.0.0.0:4317"}
2025-07-10T14:08:49.489+0530	info	otlpreceiver@v0.129.1-0.20250707130321-ac9adbf016bf/otlp.go:175	Starting HTTP server	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "endpoint": "0.0.0.0:4318"}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/server.go:886	[core] [Server #5 ListenSocket #6]ListenSocket created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:176	[core] original dial target is: "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:459	[core] [Channel #7]Channel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:207	[core] [Channel #7]parsed dial target is: resolver.Target{URL:url.URL{Scheme:"passthrough", Opaque:"", User:(*url.Userinfo)(nil), Host:"", Path:"/otlp.nr-data.net:4317", RawPath:"", OmitHost:false, ForceQuery:false, RawQuery:"", Fragment:"", RawFragment:""}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:208	[core] [Channel #7]Channel authority set to "otlp.nr-data.net:4317"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/resolver_wrapper.go:210	[core] [Channel #7]Resolver state updated: {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
} (resolver returned new addresses)	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/balancer_wrapper.go:122	[core] [Channel #7]Channel switches to new LB policy "pick_first"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	gracefulswitch/gracefulswitch.go:194	[pick-first-leaf-lb] [pick-first-leaf-lb 0x14001a90090] Received new config {
  "shuffleAddressList": false
}, resolver state {
  "Addresses": [
    {
      "Addr": "otlp.nr-data.net:4317",
      "ServerName": "",
      "Attributes": null,
      "BalancerAttributes": null,
      "Metadata": null
    }
  ],
  "Endpoints": [
    {
      "Addresses": [
        {
          "Addr": "otlp.nr-data.net:4317",
          "ServerName": "",
          "Attributes": null,
          "BalancerAttributes": null,
          "Metadata": null
        }
      ],
      "Attributes": null
    }
  ],
  "ServiceConfig": null,
  "Attributes": null
}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #7]Channel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/balancer_wrapper.go:195	[core] [Channel #7 SubChannel #8]Subchannel created	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:364	[core] [Channel #7]Channel exiting idle mode	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #7 SubChannel #8]Subchannel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	grpc@v1.73.0/clientconn.go:1352	[core] [Channel #7 SubChannel #8]Subchannel picks a new address "otlp.nr-data.net:4317" to connect	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.489+0530	info	newrelicpostgresqlreceiver@v0.129.0/factory.go:154	Starting New Relic PostgreSQL logs receiver	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "logs"}
2025-07-10T14:08:49.489+0530	info	service@v0.129.1-0.20250707130321-ac9adbf016bf/service.go:280	Everything is ready. Begin running and processing data.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}}
2025-07-10T14:08:49.567+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #7 SubChannel #8]Subchannel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.567+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #1 SubChannel #2]Subchannel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	pickfirstleaf/pickfirstleaf.go:197	[pick-first-leaf-lb] [pick-first-leaf-lb 0x14001a90090] SubConn 0x14001ab40f0 reported connectivity state READY and the health listener is disabled. Transitioning SubConn to READY.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.567+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #3 SubChannel #4]Subchannel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	pickfirstleaf/pickfirstleaf.go:197	[pick-first-leaf-lb] [pick-first-leaf-lb 0x14001614090] SubConn 0x14000d21720 reported connectivity state READY and the health listener is disabled. Transitioning SubConn to READY.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #1]Channel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #7]Channel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	pickfirstleaf/pickfirstleaf.go:197	[pick-first-leaf-lb] [pick-first-leaf-lb 0x140011a4a20] SubConn 0x140017f01e0 reported connectivity state READY and the health listener is disabled. Transitioning SubConn to READY.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:49.568+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #3]Channel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:08:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:08:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:08:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:08:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:08:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:08:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:08:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:08:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:08:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:08:50.521+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.execution_plan.async_capable	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.execution_plan.parallel_aware	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:08:50.695+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 12, "data points": 53}
2025-07-10T14:08:50.695+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 20720
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 39450
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.execution_plan.async_capable
     -> Description: Whether the execution plan node is async capable.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.node.type: Str(ProjectSet)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.52195 +0000 UTC
Value: 0
Metric #5
Descriptor:
     -> Name: postgresql.execution_plan.parallel_aware
     -> Description: Whether the execution plan node is parallel aware.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.node.type: Str(ProjectSet)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.52195 +0000 UTC
Value: 0
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 43.000000
Metric #7
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 6.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 11.230000
Metric #9
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51901 +0000 UTC
Value: 0.000000
Metric #10
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.51517 +0000 UTC
Value: 1
Metric #11
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 1562
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:38:50.490175 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:09:20.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:09:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:09:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:09:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:09:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.642+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:20.643+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:09:20.643+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 20735
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 39455
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.514645 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.51106 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 1570
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:20.490109 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:09:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:09:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:09:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:09:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:09:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:09:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:09:50.587+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:09:50.588+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 20750
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 39462
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.515382 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.511567 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 1578
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:39:50.489979 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_async_capable_ratio", help: "Whether the execution plan node is async capable.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_parallel_aware_ratio", help: "Whether the execution plan node is parallel aware.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:06.299+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.438+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_async_capable_ratio", help: "Whether the execution plan node is async capable.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_parallel_aware_ratio", help: "Whether the execution plan node is parallel aware.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:12.439+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:10:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:10:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:10:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:10:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:10:20.526+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:10:20.531+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:10:20.532+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:20.532+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:10:20.532+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:20.533+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:20.533+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:10:20.533+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:20.534+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.734+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:10:20.734+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 20763
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 39467
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.531667 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.525825 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 1586
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:20.489856 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_async_capable_ratio", help: "Whether the execution plan node is async capable.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_parallel_aware_ratio", help: "Whether the execution plan node is parallel aware.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:20.860+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.500+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:10:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:10:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:10:50.509+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:10:50.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:50.683+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:10:50.683+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 20778
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 39474
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.508651 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.505258 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 1594
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:40:50.489715 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:10:55.683+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "7.285341444s"}
2025-07-10T14:11:07.970+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "3.9926696s"}
2025-07-10T14:11:16.965+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "12.151586723s"}
2025-07-10T14:11:20.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:11:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:11:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:11:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:11:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:11:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:11:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.631+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.632+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.632+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.632+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.632+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:20.632+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:11:20.633+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 20791
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 39479
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.516136 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.512265 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 1602
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:20.489691 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:25.633+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "3.102242925s"}
2025-07-10T14:11:33.738+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "4.04582381s"}
2025-07-10T14:11:34.118+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "13.086204499s"}
2025-07-10T14:11:42.786+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "16.653492546s"}
2025-07-10T14:11:50.505+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:11:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:11:50.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:11:50.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:11:50.569+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.570+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:50.571+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:11:50.571+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 20806
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 39486
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.515563 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.511631 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 1610
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:41:50.489544 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:11:52.205+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "13.485224802s"}
2025-07-10T14:11:55.572+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = DeadlineExceeded desc = context deadline exceeded", "interval": "6.60605445s"}
2025-07-10T14:12:01.072+0530	info	transport/http2_client.go:1646	[transport] [client-transport 0x14001a5a248] Closing: connection error: desc = "error reading from server: read tcp 192.168.31.224:54960->162.247.241.110:4317: read: operation timed out"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:01.073+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #3 SubChannel #4]Subchannel Connectivity change to IDLE	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:01.073+0530	info	transport/controlbuf.go:580	[transport] [client-transport 0x14001a5a248] loopyWriter exiting with error: connection error: desc = "error reading from server: read tcp 192.168.31.224:54960->162.247.241.110:4317: read: operation timed out"	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:01.073+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #3]Channel Connectivity change to IDLE	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:01.073+0530	info	internal/retry_sender.go:133	Exporting failed. Will retry the request after interval.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "otlp/newrelic", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "error": "rpc error: code = Unavailable desc = error reading from server: read tcp 192.168.31.224:54960->162.247.241.110:4317: read: operation timed out", "interval": "12.636353808s"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_async_capable_ratio", help: "Whether the execution plan node is async capable.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_execution_plan_parallel_aware_ratio", help: "Whether the execution plan node is parallel aware.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_node_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.282+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:01.283+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:02.179+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #3 SubChannel #4]Subchannel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:02.179+0530	info	grpc@v1.73.0/clientconn.go:1352	[core] [Channel #3 SubChannel #4]Subchannel picks a new address "otlp.nr-data.net:4317" to connect	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:02.179+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #3]Channel Connectivity change to CONNECTING	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:03.193+0530	info	grpc@v1.73.0/clientconn.go:1233	[core] [Channel #3 SubChannel #4]Subchannel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:03.193+0530	info	pickfirstleaf/pickfirstleaf.go:197	[pick-first-leaf-lb] [pick-first-leaf-lb 0x140011a4a20] SubConn 0x140017f01e0 reported connectivity state READY and the health listener is disabled. Transitioning SubConn to READY.	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:03.193+0530	info	grpc@v1.73.0/clientconn.go:563	[core] [Channel #3]Channel Connectivity change to READY	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "grpc_log": true}
2025-07-10T14:12:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:12:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:12:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:20.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:12:20.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:12:20.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:20.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:12:20.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:20.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:12:20.718+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.718+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.718+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.718+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:20.719+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:12:20.720+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 20819
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 39491
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.517397 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.512634 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 1618
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:20.489441 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.501+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:12:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:12:50.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:12:50.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:12:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:12:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:12:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:12:50.665+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 51}
2025-07-10T14:12:50.666+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 20834
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 39498
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.510515 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.507087 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 1626
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:42:50.489282 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.503+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 2, "avg_elapsed_time_ms": 1504.572}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:13:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:13:20.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:13:20.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:13:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:13:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:13:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.wait.event.total_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:20.611+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 11, "data points": 53}
2025-07-10T14:13:20.611+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 20849
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 39503
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1504.572000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.513149 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(0f2f9613fe5539002a680dc6db8c4a48)
     -> postgresql.query.text: Str(
BEGIN; 
-- Create a table and lock it
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = 1 WHERE id = 1;
-- This will keep the transaction open (we'll close it manually)
SELECT 'Transaction started, table locked. Will sleep for 30 seconds to allow blocking test.';
SELECT pg_sleep(30);
COMMIT;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.513149 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 2
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.508789 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 1635
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.489211 +0000 UTC
Value: 203
Metric #10
Descriptor:
     -> Name: postgresql.wait.event.total_time
     -> Description: Total wait time for the wait event in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(unknown)
     -> postgresql.query.text: Str(
BEGIN; 
-- Create a table and lock it
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = 1 WHERE id = 1;
-- This will keep the transaction open (we'll close it manually)
SELECT 'Transaction started, table locked. Will sleep for 30 seconds to allow blocking test.';
SELECT pg_sleep(30);
COMMIT;
)
     -> postgresql.wait.event.name: Str(Timeout:PgSleep)
     -> postgresql.wait.category: Str(Other)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:20.510777 +0000 UTC
Value: 19300.931000
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.502+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 11014.523}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:13:50.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:13:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:13:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:13:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:13:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:13:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:13:50.553+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.553+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.553+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.wait.event.total_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:13:50.554+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 11, "data points": 53}
2025-07-10T14:13:50.554+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 20870
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 39510
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 11014.523000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.512235 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(8370f3605d98902a9c881a1b04bdb863)
     -> postgresql.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.512235 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 3
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.508392 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 1643
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.489112 +0000 UTC
Value: 203
Metric #10
Descriptor:
     -> Name: postgresql.wait.event.total_time
     -> Description: Total wait time for the wait event in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(unknown)
     -> postgresql.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
     -> postgresql.wait.event.name: Str(Timeout:PgSleep)
     -> postgresql.wait.category: Str(Other)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:43:50.510024 +0000 UTC
Value: 3313.013000
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/accumulator.go:311	metric expired: postgresql.execution_plan.async_capable	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/accumulator.go:311	metric expired: postgresql.execution_plan.parallel_aware	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:18.778+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.504+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 11014.523}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 11.23}
2025-07-10T14:14:20.510+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 10}
2025-07-10T14:14:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:14:20.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:14:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:14:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:20.516+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.blocked.session.pid	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.blocking.session.duration	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.blocking.session.pid	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.blocking.session.wait_event	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.blocking.session.wait_event_type	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.695+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.696+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.wait.event.total_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:20.696+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 16, "data points": 60}
2025-07-10T14:14:20.696+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.blocked.session.pid
     -> Description: Process ID of the blocked session.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.513604 +0000 UTC
Value: 16522
Metric #1
Descriptor:
     -> Name: postgresql.blocking.session.duration
     -> Description: Duration for which the session has been blocking.
     -> Unit: s
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.blocked.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
     -> postgresql.blocking.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.513604 +0000 UTC
Value: 26.250539
Metric #2
Descriptor:
     -> Name: postgresql.blocking.session.pid
     -> Description: Process ID of the blocking session.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.513604 +0000 UTC
Value: 16504
Metric #3
Descriptor:
     -> Name: postgresql.blocking.session.wait_event
     -> Description: Wait event for the blocking session.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.blocked.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
     -> postgresql.blocking.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
     -> postgresql.wait.event: Str(transactionid)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.513604 +0000 UTC
Value: 1
Metric #4
Descriptor:
     -> Name: postgresql.blocking.session.wait_event_type
     -> Description: Wait event type for the blocking session.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.blocked.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
     -> postgresql.blocking.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
     -> postgresql.wait.event.type: Str(Lock)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.513604 +0000 UTC
Value: 1
Metric #5
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 20886
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 39515
Metric #6
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 4
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 1
Metric #7
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 100
Metric #8
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 3
Metric #9
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 255.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 918.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 28.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 43.000000
Metric #10
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 24.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 6.000000
Metric #11
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 20014.432000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 11014.523000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 144.601000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 143.521000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 94.970000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 67.739000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 44.676000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 13.782000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 11.230000
Metric #12
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.514421 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(29fb734db43622759b3a6d90ead73070)
     -> postgresql.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.514421 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(8370f3605d98902a9c881a1b04bdb863)
     -> postgresql.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.514421 +0000 UTC
Value: 0.000000
Metric #13
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 3
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 3
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.51042 +0000 UTC
Value: 1
Metric #14
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 1651
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.488986 +0000 UTC
Value: 203
Metric #15
Descriptor:
     -> Name: postgresql.wait.event.total_time
     -> Description: Total wait time for the wait event in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(unknown)
     -> postgresql.query.text: Str(
BEGIN; 
CREATE TABLE IF NOT EXISTS test_lock_table (id INTEGER PRIMARY KEY);
INSERT INTO test_lock_table VALUES (1) ON CONFLICT DO NOTHING;
UPDATE test_lock_table SET id = 1 WHERE id = 1;
SELECT pg_sleep(60);
COMMIT;
)
     -> postgresql.wait.event.name: Str(Timeout:PgSleep)
     -> postgresql.wait.category: Str(Other)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.512244 +0000 UTC
Value: 33315.296000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(unknown)
     -> postgresql.query.text: Str(
UPDATE test_lock_table SET id = 2 WHERE id = 1;
)
     -> postgresql.wait.event.name: Str(Lock:transactionid)
     -> postgresql.wait.category: Str(Locks)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:20.512244 +0000 UTC
Value: 26249.026000
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_type_ratio", help: "Wait event type for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_pid_ratio", help: "Process ID of the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_duration_seconds", help: "Duration for which the session has been blocking.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_ratio", help: "Wait event for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocked_session_pid_ratio", help: "Process ID of the blocked session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:44.688+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.501+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:14:50.506+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:14:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:14:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:14:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:50.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:14:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:14:50.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:14:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:50.643+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:14:50.643+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 20903
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 39522
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.510866 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.506563 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 1659
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:44:50.488866 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_type_ratio", help: "Wait event type for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.635+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_pid_ratio", help: "Process ID of the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_duration_seconds", help: "Duration for which the session has been blocking.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_ratio", help: "Wait event for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocked_session_pid_ratio", help: "Process ID of the blocked session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:14:58.636+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:413	collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/accumulator.go:298	Accumulator collect called	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_type_ratio", help: "Wait event type for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_pid_ratio", help: "Process ID of the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_duration_seconds", help: "Duration for which the session has been blocking.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_reads_ratio", help: "Average number of disk reads per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocking_session_wait_event_ratio", help: "Wait event for the blocking session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_blocked_query_text,postgresql_blocking_query_text,postgresql_wait_event,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_rollbacks_total", help: "The number of rollbacks.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_blocked_session_pid_ratio", help: "Process ID of the blocked session.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_connection_max_ratio", help: "Maximum number of client connections allowed.", constLabels: {}, variableLabels: {otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_commits_total", help: "The number of commits.", constLabels: {}, variableLabels: {postgresql_database_name,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_cpu_time_milliseconds", help: "CPU time consumed by the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_disk_writes_ratio", help: "Average number of disk writes per query execution.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_avg_elapsed_time_milliseconds", help: "Average execution time for the query in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_wait_event_total_time_milliseconds", help: "Total wait time for the wait event in milliseconds.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_wait_event_name,postgresql_wait_category,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:10.034+0530	debug	prometheusexporter@v0.129.0/collector.go:437	metric served: Desc{fqName: "postgresql_query_execution_count_total", help: "Number of times the query was executed.", constLabels: {}, variableLabels: {postgresql_database_name,postgresql_query_id,postgresql_query_text,postgresql_statement_type,otel_scope_name,otel_scope_version,otel_scope_schema_url}}	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.502+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:15:20.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:15:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:15:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:15:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:15:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:15:20.508+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:15:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:15:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:20.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:20.513+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:15:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:15:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:15:20.515+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:20.588+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:15:20.589+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 20916
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 39527
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.511901 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.507869 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 1668
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:20.488801 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.507+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:15:50.514+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:15:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:15:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:15:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:50.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:15:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:15:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:15:50.520+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:15:50.530+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:15:50.531+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 20931
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 39534
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.518725 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.514509 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 1677
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:45:50.488707 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:16:20.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:16:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:16:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:16:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:16:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:16:20.529+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:20.529+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:16:20.529+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:16:20.530+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:16:20.530+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:20.530+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:16:20.531+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:20.531+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:20.531+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:16:20.672+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:20.673+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:16:20.674+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 20944
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 39539
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.528821 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.522831 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 1686
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:20.488589 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:16:50.518+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:16:50.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:50.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:16:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:16:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:16:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:16:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:16:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:16:50.619+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:16:50.620+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 20959
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 39546
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.5223 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.518108 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 1695
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:46:50.488538 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.512+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:17:20.519+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:17:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:20.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:17:20.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:20.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:20.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:17:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:17:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:17:20.525+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:20.565+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:17:20.565+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 20972
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 39551
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.52347 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.519117 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 1704
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:20.488398 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.511+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:109	Starting New Relic query performance metrics collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:194	Executing slow queries collection	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query": "\n\t\tSELECT \n\t\t\tpss.queryid AS query_id,\n\t\t\tLEFT(pss.query, 4095) AS query_text,\n\t\t\tpd.datname AS database_name,\n\t\t\tcurrent_schema() AS schema_name,\n\t\t\tpss.calls AS execution_count,\n\t\t\tROUND((pss.total_exec_time / pss.calls)::numeric, 3) AS avg_elapsed_time_ms,\n\t\t\tpss.shared_blks_read / pss.calls AS avg_disk_reads,\n\t\t\tpss.shared_blks_written / pss.calls AS avg_disk_writes,\n\t\t\tCASE\n\t\t\t\tWHEN pss.query ILIKE 'SELECT%' THEN 'SELECT'\n\t\t\t\tWHEN pss.query ILIKE 'INSERT%' THEN 'INSERT'\n\t\t\t\tWHEN pss.query ILIKE 'UPDATE%' THEN 'UPDATE'\n\t\t\t\tWHEN pss.query ILIKE 'DELETE%' THEN 'DELETE'\n\t\t\t\tELSE 'OTHER'\n\t\t\tEND AS statement_type,\n\t\t\tto_char(NOW() AT TIME ZONE 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"') AS collection_timestamp\n\t\tFROM \n\t\t\tpg_stat_statements pss\n\t\tJOIN \n\t\t\tpg_database pd ON pss.dbid = pd.oid\n\t\tWHERE \n\t\t\tpd.datname IN ('testdb', 'postgres')\n\t\t\tAND pss.calls >= 1\n\t\t\tAND (pss.total_exec_time / pss.calls) >= 10\n\t\tORDER BY \n\t\t\tavg_elapsed_time_ms DESC\n\t\tLIMIT 100"}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "postgres", "execution_count": 3, "avg_elapsed_time_ms": 46705.434}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "database_name": "testdb", "execution_count": 4, "avg_elapsed_time_ms": 23261.372}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 20014.432}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 17646.179}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 144.601}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 143.521}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "database_name": "testdb", "execution_count": 3, "avg_elapsed_time_ms": 94.97}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 67.739}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "database_name": "postgres", "execution_count": 1, "avg_elapsed_time_ms": 44.676}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:221	Found slow query	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2194329260438961401", "database_name": "testdb", "execution_count": 1, "avg_elapsed_time_ms": 13.782}
2025-07-10T14:17:50.517+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:241	Slow query collection completed	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "slow_query_count": 11}
2025-07-10T14:17:50.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-8330292678256039428", "error": "pq: syntax error at or near \"DO\""}
2025-07-10T14:17:50.522+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "7679276192979657576", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2920803561901199087", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-680770601819606026", "error": "pq: syntax error at or near \"SERIAL\""}
2025-07-10T14:17:50.523+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-3404018605099167039", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "-7843470278038126227", "error": "pq: syntax error at or near \"ANALYZE\""}
2025-07-10T14:17:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2572271098470785670", "error": "pq: syntax error at or near \"DATABASE\""}
2025-07-10T14:17:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "2947340716630300180", "error": "pq: there is no parameter $2"}
2025-07-10T14:17:50.524+0530	debug	newrelicpostgresqlreceiver@v0.129.0/newrelic_performance.go:464	Failed to get execution plan	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "newrelicpostgresql", "otelcol.component.kind": "receiver", "otelcol.signal": "metrics", "query_id": "440101247839410938", "error": "pq: there is no parameter $1"}
2025-07-10T14:17:50.710+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.commits	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.710+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.710+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.connection.max	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.710+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.database.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.710+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_reads	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_disk_writes	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.avg_elapsed_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.cpu_time	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.query.execution.count	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	debug	prometheusexporter@v0.129.0/accumulator.go:82	accumulating metric: postgresql.rollbacks	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "prometheus", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
2025-07-10T14:17:50.711+0530	info	Metrics	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics", "resource metrics": 1, "metrics": 10, "data points": 55}
2025-07-10T14:17:50.712+0530	info	ResourceMetrics #0
Resource SchemaURL: 
ScopeMetrics #0
ScopeMetrics SchemaURL: 
InstrumentationScope github.com/open-telemetry/opentelemetry-collector-contrib/receiver/newrelicpostgresqlreceiver 0.129.0-dev
Metric #0
Descriptor:
     -> Name: postgresql.commits
     -> Description: The number of commits.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 20987
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 39558
Metric #1
Descriptor:
     -> Name: postgresql.connection.count
     -> Description: Number of user connections.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 2
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 1
Metric #2
Descriptor:
     -> Name: postgresql.connection.max
     -> Description: Maximum number of client connections allowed.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 100
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 100
Metric #3
Descriptor:
     -> Name: postgresql.database.count
     -> Description: Number of user databases.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: false
     -> AggregationTemporality: Unspecified
NumberDataPoints #0
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 3
NumberDataPoints #1
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 3
Metric #4
Descriptor:
     -> Name: postgresql.query.avg_disk_reads
     -> Description: Average number of disk reads per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 255.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 918.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 28.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 43.000000
Metric #5
Descriptor:
     -> Name: postgresql.query.avg_disk_writes
     -> Description: Average number of disk writes per query execution.
     -> Unit: 1
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 24.000000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 0.000000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 6.000000
Metric #6
Descriptor:
     -> Name: postgresql.query.avg_elapsed_time
     -> Description: Average execution time for the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 46705.434000
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 23261.372000
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 20014.432000
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 17646.179000
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 144.601000
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 143.521000
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 94.970000
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 67.739000
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 44.676000
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 13.782000
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 11.230000
Metric #7
Descriptor:
     -> Name: postgresql.query.cpu_time
     -> Description: CPU time consumed by the query in milliseconds.
     -> Unit: ms
     -> DataType: Gauge
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(9de2b22310490e3e53ca788f3ba250e1)
     -> postgresql.query.text: Str(
		SELECT 
			COALESCE(pss.queryid::text, md5(sa.query)) AS query_id,
			LEFT(sa.query, 4095) AS query_text,
			pd.datname AS database_name,
			md5(sa.query || NOW()::text) AS plan_id,
			0 AS cpu_time_ms,
			EXTRACT(EPOCH FROM (NOW() - sa.query_start)) * 1000 AS exec_time_ms,
			sa.query AS real_query_text
		FROM 
			pg_stat_activity sa
		LEFT JOIN 
			pg_stat_statements pss ON pss.query = sa.query AND pss.dbid = sa.datid
		LEFT JOIN 
			pg_database pd ON pd.oid = sa.datid
		WHERE 
			pd.datname IN ('testdb', 'postgres')
			AND sa.query IS NOT NULL
			AND sa.query != ''
			AND sa.state = 'active'
			AND sa.query NOT LIKE 'EXPLAIN (FORMAT JSON) %'
		LIMIT 100)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.522225 +0000 UTC
Value: 0.000000
Metric #8
Descriptor:
     -> Name: postgresql.query.execution.count
     -> Description: Number of times the query was executed.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 3
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(440101247839410938)
     -> postgresql.query.text: Str(SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 4
NumberDataPoints #2
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(-3404018605099167039)
     -> postgresql.query.text: Str(select * from pg_sleep($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #3
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2947340716630300180)
     -> postgresql.query.text: Str(-- Keep the transaction open for blocking test
UPDATE test_lock_table SET id = $1 WHERE id = $2)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 3
NumberDataPoints #4
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-8330292678256039428)
     -> postgresql.query.text: Str(DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'slow_calculation') THEN
    PERFORM slow_calculation(50);
  END IF;
END $$)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #5
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(7679276192979657576)
     -> postgresql.query.text: Str(SELECT slow_calculation($1))
     -> postgresql.statement.type: Str(SELECT)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #6
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2920803561901199087)
     -> postgresql.query.text: Str(-- Create some slow queries to trigger slow query collection
SELECT pg_sleep($1))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 3
NumberDataPoints #7
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-7843470278038126227)
     -> postgresql.query.text: Str(ANALYZE)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #8
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(2572271098470785670)
     -> postgresql.query.text: Str(CREATE DATABASE test_monitoring)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #9
Data point attributes:
     -> postgresql.database.name: Str(testdb)
     -> postgresql.query.id: Str(2194329260438961401)
     -> postgresql.query.text: Str(-- This should be captured as a slow query now
CREATE TEMP TABLE test_table AS SELECT generate_series(1,1000) as id)
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
NumberDataPoints #10
Data point attributes:
     -> postgresql.database.name: Str(postgres)
     -> postgresql.query.id: Str(-680770601819606026)
     -> postgresql.query.text: Str(CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
))
     -> postgresql.statement.type: Str(OTHER)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.51733 +0000 UTC
Value: 1
Metric #9
Descriptor:
     -> Name: postgresql.rollbacks
     -> Description: The number of rollbacks.
     -> Unit: 1
     -> DataType: Sum
     -> IsMonotonic: true
     -> AggregationTemporality: Cumulative
NumberDataPoints #0
Data point attributes:
     -> postgresql.database.name: Str(testdb)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 1713
NumberDataPoints #1
Data point attributes:
     -> postgresql.database.name: Str(postgres)
StartTimestamp: 2025-07-10 08:38:49.485661 +0000 UTC
Timestamp: 2025-07-10 08:47:50.488248 +0000 UTC
Value: 203
	{"resource": {"service.instance.id": "52394ef5-91df-4927-bdbb-ed57a02e263c", "service.name": "otelcontribcol", "service.version": "0.129.0-dev"}, "otelcol.component.id": "debug", "otelcol.component.kind": "exporter", "otelcol.signal": "metrics"}
