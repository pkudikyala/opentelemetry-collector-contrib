// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					PostgresqlBackends:                         MetricConfig{Enabled: true},
					PostgresqlBlockedSessionPid:                MetricConfig{Enabled: true},
					PostgresqlBlockingSessionDuration:          MetricConfig{Enabled: true},
					PostgresqlBlockingSessionPid:               MetricConfig{Enabled: true},
					PostgresqlBlockingSessionWaitEvent:         MetricConfig{Enabled: true},
					PostgresqlBlockingSessionWaitEventType:     MetricConfig{Enabled: true},
					PostgresqlBlocksHit:                        MetricConfig{Enabled: true},
					PostgresqlBlocksRead:                       MetricConfig{Enabled: true},
					PostgresqlCommits:                          MetricConfig{Enabled: true},
					PostgresqlConnectionCount:                  MetricConfig{Enabled: true},
					PostgresqlConnectionMax:                    MetricConfig{Enabled: true},
					PostgresqlDatabaseCount:                    MetricConfig{Enabled: true},
					PostgresqlDatabaseLocks:                    MetricConfig{Enabled: true},
					PostgresqlExecutionPlanActualLoops:         MetricConfig{Enabled: true},
					PostgresqlExecutionPlanActualRows:          MetricConfig{Enabled: true},
					PostgresqlExecutionPlanActualTotalTime:     MetricConfig{Enabled: true},
					PostgresqlExecutionPlanAsyncCapable:        MetricConfig{Enabled: true},
					PostgresqlExecutionPlanCostActual:          MetricConfig{Enabled: true},
					PostgresqlExecutionPlanCostEstimate:        MetricConfig{Enabled: true},
					PostgresqlExecutionPlanIoReadTime:          MetricConfig{Enabled: true},
					PostgresqlExecutionPlanIoWriteTime:         MetricConfig{Enabled: true},
					PostgresqlExecutionPlanParallelAware:       MetricConfig{Enabled: true},
					PostgresqlExecutionPlanPlanRows:            MetricConfig{Enabled: true},
					PostgresqlExecutionPlanPlanWidth:           MetricConfig{Enabled: true},
					PostgresqlExecutionPlanSharedHitBlocks:     MetricConfig{Enabled: true},
					PostgresqlExecutionPlanSharedReadBlocks:    MetricConfig{Enabled: true},
					PostgresqlExecutionPlanSharedWrittenBlocks: MetricConfig{Enabled: true},
					PostgresqlExecutionPlanStartupTime:         MetricConfig{Enabled: true},
					PostgresqlExecutionPlanTempReadBlocks:      MetricConfig{Enabled: true},
					PostgresqlExecutionPlanTempWrittenBlocks:   MetricConfig{Enabled: true},
					PostgresqlIndexScans:                       MetricConfig{Enabled: true},
					PostgresqlIndexSize:                        MetricConfig{Enabled: true},
					PostgresqlOperations:                       MetricConfig{Enabled: true},
					PostgresqlQueryAvgDiskReads:                MetricConfig{Enabled: true},
					PostgresqlQueryAvgDiskWrites:               MetricConfig{Enabled: true},
					PostgresqlQueryAvgElapsedTime:              MetricConfig{Enabled: true},
					PostgresqlQueryCPUTime:                     MetricConfig{Enabled: true},
					PostgresqlQueryExecutionCount:              MetricConfig{Enabled: true},
					PostgresqlRollbacks:                        MetricConfig{Enabled: true},
					PostgresqlRows:                             MetricConfig{Enabled: true},
					PostgresqlTableScans:                       MetricConfig{Enabled: true},
					PostgresqlTableSize:                        MetricConfig{Enabled: true},
					PostgresqlTableVacuumCount:                 MetricConfig{Enabled: true},
					PostgresqlWaitEventTotalTime:               MetricConfig{Enabled: true},
					PostgresqlWalAge:                           MetricConfig{Enabled: true},
					PostgresqlWalLag:                           MetricConfig{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesConfig{
					PostgresqlDatabaseName: ResourceAttributeConfig{Enabled: true},
					PostgresqlIndexName:    ResourceAttributeConfig{Enabled: true},
					PostgresqlSchemaName:   ResourceAttributeConfig{Enabled: true},
					PostgresqlTableName:    ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					PostgresqlBackends:                         MetricConfig{Enabled: false},
					PostgresqlBlockedSessionPid:                MetricConfig{Enabled: false},
					PostgresqlBlockingSessionDuration:          MetricConfig{Enabled: false},
					PostgresqlBlockingSessionPid:               MetricConfig{Enabled: false},
					PostgresqlBlockingSessionWaitEvent:         MetricConfig{Enabled: false},
					PostgresqlBlockingSessionWaitEventType:     MetricConfig{Enabled: false},
					PostgresqlBlocksHit:                        MetricConfig{Enabled: false},
					PostgresqlBlocksRead:                       MetricConfig{Enabled: false},
					PostgresqlCommits:                          MetricConfig{Enabled: false},
					PostgresqlConnectionCount:                  MetricConfig{Enabled: false},
					PostgresqlConnectionMax:                    MetricConfig{Enabled: false},
					PostgresqlDatabaseCount:                    MetricConfig{Enabled: false},
					PostgresqlDatabaseLocks:                    MetricConfig{Enabled: false},
					PostgresqlExecutionPlanActualLoops:         MetricConfig{Enabled: false},
					PostgresqlExecutionPlanActualRows:          MetricConfig{Enabled: false},
					PostgresqlExecutionPlanActualTotalTime:     MetricConfig{Enabled: false},
					PostgresqlExecutionPlanAsyncCapable:        MetricConfig{Enabled: false},
					PostgresqlExecutionPlanCostActual:          MetricConfig{Enabled: false},
					PostgresqlExecutionPlanCostEstimate:        MetricConfig{Enabled: false},
					PostgresqlExecutionPlanIoReadTime:          MetricConfig{Enabled: false},
					PostgresqlExecutionPlanIoWriteTime:         MetricConfig{Enabled: false},
					PostgresqlExecutionPlanParallelAware:       MetricConfig{Enabled: false},
					PostgresqlExecutionPlanPlanRows:            MetricConfig{Enabled: false},
					PostgresqlExecutionPlanPlanWidth:           MetricConfig{Enabled: false},
					PostgresqlExecutionPlanSharedHitBlocks:     MetricConfig{Enabled: false},
					PostgresqlExecutionPlanSharedReadBlocks:    MetricConfig{Enabled: false},
					PostgresqlExecutionPlanSharedWrittenBlocks: MetricConfig{Enabled: false},
					PostgresqlExecutionPlanStartupTime:         MetricConfig{Enabled: false},
					PostgresqlExecutionPlanTempReadBlocks:      MetricConfig{Enabled: false},
					PostgresqlExecutionPlanTempWrittenBlocks:   MetricConfig{Enabled: false},
					PostgresqlIndexScans:                       MetricConfig{Enabled: false},
					PostgresqlIndexSize:                        MetricConfig{Enabled: false},
					PostgresqlOperations:                       MetricConfig{Enabled: false},
					PostgresqlQueryAvgDiskReads:                MetricConfig{Enabled: false},
					PostgresqlQueryAvgDiskWrites:               MetricConfig{Enabled: false},
					PostgresqlQueryAvgElapsedTime:              MetricConfig{Enabled: false},
					PostgresqlQueryCPUTime:                     MetricConfig{Enabled: false},
					PostgresqlQueryExecutionCount:              MetricConfig{Enabled: false},
					PostgresqlRollbacks:                        MetricConfig{Enabled: false},
					PostgresqlRows:                             MetricConfig{Enabled: false},
					PostgresqlTableScans:                       MetricConfig{Enabled: false},
					PostgresqlTableSize:                        MetricConfig{Enabled: false},
					PostgresqlTableVacuumCount:                 MetricConfig{Enabled: false},
					PostgresqlWaitEventTotalTime:               MetricConfig{Enabled: false},
					PostgresqlWalAge:                           MetricConfig{Enabled: false},
					PostgresqlWalLag:                           MetricConfig{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesConfig{
					PostgresqlDatabaseName: ResourceAttributeConfig{Enabled: false},
					PostgresqlIndexName:    ResourceAttributeConfig{Enabled: false},
					PostgresqlSchemaName:   ResourceAttributeConfig{Enabled: false},
					PostgresqlTableName:    ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				PostgresqlDatabaseName: ResourceAttributeConfig{Enabled: true},
				PostgresqlIndexName:    ResourceAttributeConfig{Enabled: true},
				PostgresqlSchemaName:   ResourceAttributeConfig{Enabled: true},
				PostgresqlTableName:    ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				PostgresqlDatabaseName: ResourceAttributeConfig{Enabled: false},
				PostgresqlIndexName:    ResourceAttributeConfig{Enabled: false},
				PostgresqlSchemaName:   ResourceAttributeConfig{Enabled: false},
				PostgresqlTableName:    ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
