// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for newrelicpostgresql metrics.
type MetricsConfig struct {
	PostgresqlBlockedSessionPid            MetricConfig `mapstructure:"postgresql.blocked.session.pid"`
	PostgresqlBlockingSessionPid           MetricConfig `mapstructure:"postgresql.blocking.session.pid"`
	PostgresqlBlocksHit                    MetricConfig `mapstructure:"postgresql.blocks_hit"`
	PostgresqlBlocksRead                   MetricConfig `mapstructure:"postgresql.blocks_read"`
	PostgresqlCommits                      MetricConfig `mapstructure:"postgresql.commits"`
	PostgresqlConnectionCount              MetricConfig `mapstructure:"postgresql.connection.count"`
	PostgresqlConnectionMax                MetricConfig `mapstructure:"postgresql.connection.max"`
	PostgresqlDatabaseCount                MetricConfig `mapstructure:"postgresql.database.count"`
	PostgresqlDatabaseLocks                MetricConfig `mapstructure:"postgresql.database.locks"`
	PostgresqlExecutionPlanActualLoops     MetricConfig `mapstructure:"postgresql.execution_plan.actual_loops"`
	PostgresqlExecutionPlanActualRows      MetricConfig `mapstructure:"postgresql.execution_plan.actual_rows"`
	PostgresqlExecutionPlanActualTotalTime MetricConfig `mapstructure:"postgresql.execution_plan.actual_total_time"`
	PostgresqlExecutionPlanAsyncCapable    MetricConfig `mapstructure:"postgresql.execution_plan.async_capable"`
	PostgresqlExecutionPlanParallelAware   MetricConfig `mapstructure:"postgresql.execution_plan.parallel_aware"`
	PostgresqlIndexScans                   MetricConfig `mapstructure:"postgresql.index.scans"`
	PostgresqlIndexSize                    MetricConfig `mapstructure:"postgresql.index.size"`
	PostgresqlOperations                   MetricConfig `mapstructure:"postgresql.operations"`
	PostgresqlQueryAvgDiskReads            MetricConfig `mapstructure:"postgresql.query.avg_disk_reads"`
	PostgresqlQueryAvgDiskWrites           MetricConfig `mapstructure:"postgresql.query.avg_disk_writes"`
	PostgresqlQueryAvgElapsedTime          MetricConfig `mapstructure:"postgresql.query.avg_elapsed_time"`
	PostgresqlQueryCPUTime                 MetricConfig `mapstructure:"postgresql.query.cpu_time"`
	PostgresqlQueryExecutionCount          MetricConfig `mapstructure:"postgresql.query.execution.count"`
	PostgresqlRollbacks                    MetricConfig `mapstructure:"postgresql.rollbacks"`
	PostgresqlRows                         MetricConfig `mapstructure:"postgresql.rows"`
	PostgresqlTableScans                   MetricConfig `mapstructure:"postgresql.table.scans"`
	PostgresqlTableSize                    MetricConfig `mapstructure:"postgresql.table.size"`
	PostgresqlTableVacuumCount             MetricConfig `mapstructure:"postgresql.table.vacuum.count"`
	PostgresqlWaitEventTotalTime           MetricConfig `mapstructure:"postgresql.wait.event.total_time"`
	PostgresqlWalAge                       MetricConfig `mapstructure:"postgresql.wal.age"`
	PostgresqlWalLag                       MetricConfig `mapstructure:"postgresql.wal.lag"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		PostgresqlBlockedSessionPid: MetricConfig{
			Enabled: true,
		},
		PostgresqlBlockingSessionPid: MetricConfig{
			Enabled: true,
		},
		PostgresqlBlocksHit: MetricConfig{
			Enabled: true,
		},
		PostgresqlBlocksRead: MetricConfig{
			Enabled: true,
		},
		PostgresqlCommits: MetricConfig{
			Enabled: true,
		},
		PostgresqlConnectionCount: MetricConfig{
			Enabled: true,
		},
		PostgresqlConnectionMax: MetricConfig{
			Enabled: true,
		},
		PostgresqlDatabaseCount: MetricConfig{
			Enabled: true,
		},
		PostgresqlDatabaseLocks: MetricConfig{
			Enabled: true,
		},
		PostgresqlExecutionPlanActualLoops: MetricConfig{
			Enabled: true,
		},
		PostgresqlExecutionPlanActualRows: MetricConfig{
			Enabled: true,
		},
		PostgresqlExecutionPlanActualTotalTime: MetricConfig{
			Enabled: true,
		},
		PostgresqlExecutionPlanAsyncCapable: MetricConfig{
			Enabled: true,
		},
		PostgresqlExecutionPlanParallelAware: MetricConfig{
			Enabled: true,
		},
		PostgresqlIndexScans: MetricConfig{
			Enabled: true,
		},
		PostgresqlIndexSize: MetricConfig{
			Enabled: true,
		},
		PostgresqlOperations: MetricConfig{
			Enabled: true,
		},
		PostgresqlQueryAvgDiskReads: MetricConfig{
			Enabled: true,
		},
		PostgresqlQueryAvgDiskWrites: MetricConfig{
			Enabled: true,
		},
		PostgresqlQueryAvgElapsedTime: MetricConfig{
			Enabled: true,
		},
		PostgresqlQueryCPUTime: MetricConfig{
			Enabled: true,
		},
		PostgresqlQueryExecutionCount: MetricConfig{
			Enabled: true,
		},
		PostgresqlRollbacks: MetricConfig{
			Enabled: true,
		},
		PostgresqlRows: MetricConfig{
			Enabled: true,
		},
		PostgresqlTableScans: MetricConfig{
			Enabled: true,
		},
		PostgresqlTableSize: MetricConfig{
			Enabled: true,
		},
		PostgresqlTableVacuumCount: MetricConfig{
			Enabled: true,
		},
		PostgresqlWaitEventTotalTime: MetricConfig{
			Enabled: true,
		},
		PostgresqlWalAge: MetricConfig{
			Enabled: true,
		},
		PostgresqlWalLag: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for newrelicpostgresql resource attributes.
type ResourceAttributesConfig struct {
	PostgresqlDatabaseName ResourceAttributeConfig `mapstructure:"postgresql.database.name"`
	PostgresqlIndexName    ResourceAttributeConfig `mapstructure:"postgresql.index.name"`
	PostgresqlSchemaName   ResourceAttributeConfig `mapstructure:"postgresql.schema.name"`
	PostgresqlTableName    ResourceAttributeConfig `mapstructure:"postgresql.table.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		PostgresqlDatabaseName: ResourceAttributeConfig{
			Enabled: true,
		},
		PostgresqlIndexName: ResourceAttributeConfig{
			Enabled: true,
		},
		PostgresqlSchemaName: ResourceAttributeConfig{
			Enabled: true,
		},
		PostgresqlTableName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for newrelicpostgresql metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
